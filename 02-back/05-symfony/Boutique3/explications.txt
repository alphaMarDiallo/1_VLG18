
-------
SYMFONY
-------

INTRO  	 : Qu'est-ce que Symfony ? 
ETAPE  1 : Installation du framework Symfony 3.4
ETAPE  2 : Les Bundles
ETAPE  3 : Les routes et les controllers 
ETAPE  4 : Créer notre Boutique
ETAPE  5 : TWIG
ETAPE  6 : Assets
ETAPE  7 : Nos Entités
ETAPE  8 : Doctrine
ETAPE  9 : Les formulaires
ETAPE 10 : Validations des données
ETAPE 11 : Sécurité et Utilisateurs
ETAPE 12 : Les services
ETAPE 13 : Les évènements
ETAPE 14 : Symfony 4 (BundleLess et Flex)

-------------------------------
INTRO : Qu'est-ce que Symfony ? 
-------------------------------

1/ avantages à utiliser un framework du marché ? 
	1/ Offre une organisation optimisée
	2/ Fonctionnalités communes d'un projet à un autre
	3/ Les services disponibles (routing, la sécurité, twig, doctrine...)
	4/ La communauté
	
2/ Choix du framework ? 
	A/ Construire son propre framework ? 
	B/ Les framework fullstack (Symfony, Laravel, zend, cake...) ? 
	C/ Les mini-framework (Silex, Slim, fat-free, Lumen) ? 


3/ Symfony : 
	A/ Framework français créé par les équipes de SensioLab
	B/ Versions : 
		LTS : 
		- 2.8
		- 3.4 : 2.8 (retraits de quelques fonctionnalités dépréciées)
		
		- 4/4.1/4.2 : 
			-> PHP 7.1
			-> Bundle-less
			-> Flex (service qui configure les outils de manière automatique et standardisée)

-----------------------------------------------
ETAPE 1 : Installation du framework Symfony 3.4
-----------------------------------------------
Sommaire : 
1/ installer de composer
2/ Installer une application SF vierge
3/ Arborescence des dossiers et fichiers
4/ Lancement de l'application
5/ Fonctionnement des URL
--------------------------

1/ installer de composer
	- Composer est outil de gestion de dépendances. Il permet d'installer les services (composants ou dépendances), et de les mettre à jour (équivalent de NPM). 
	- Il est relié à un fichier composer.json
	
2/ Installation d'une application SF

	A/ Se diriger sur le dossier où l'on installe SF
	<cmd>
	cd c://Xampp/htdocs/Symfony
	
	Ou
	Dans le dossier cible faire clic-droit + maj > Ouvrir une fenêtre power shell
	
	B/ Pour installer un SF : 
	Avec Symfony installer :
	<cmd>
	symfony new project nom_du_projet
	
	Avec Composer : 
	<cmd>
	
	composer create-project symfony/framework-standard-edition projet_test

3/ Arborescence des dossier/fichiers : 
	- app/ : La configuation de notre application + layout
	- bin/ : Les exécutables de notre app 
	- src/ : Contient tout le code de notre application. C'est ici que l'on mettra notre code. 
	tests/ : Concerne tous les tests de notre application
	- var/ : Concernen les fichiers écris par SF au cours du processus d'éxécution (cache, les logs...)
	- vendor/ : Contient tout le code source (coeur) d'un projet SF
	- web/ : Contenir tous les fichiers accessibles aux clients (img/ photo/, JS/ , fonts/, CSS) et le fichier controller frontal (app.php ou app_dev.php) 
	- composer.json : Contient les dépendances. Ce fichier permet de mettre à l'application et les dépendances. Pour le moment constatons simplement qu'il est bien rempli...
	
4/ Lancement de notre application :
	
	Méthode 1 : 
	navigateur : localhost/Symfony/projet_test/web/app.php
	navigateur : localhost/Symfony/projet_test/web/app_dev.php
	
	Méthode 2 : Serveur interne à SF
	<cmd>
	cd projet_test
	php bin/console server:run
	
	navigateur : localhost:8000
	Nous permet de ne pas avoir à configurer des virtual hosts pour nos projets. 
	
	Les fichiers exécutés sont : 
	web/app.php (mode prod)
	web/app_dev.php (mode dev)
	
	test : 
	localhost/Symfony/projet_test/web/app.php/page_inconnue
	localhost/Symfony/projet_test/web/app_dev.php/page_inconnue
	
	En prod les erreurs sont invisibles (404) alors qu'en dev on a une page avec les erreurs. En dev on a une barre de développeur. 
	
5/ Fonctionnement des URL
	
	Nos controleurs frontaux (app.php ou app_dev.php) recoivent une requête HTTP (URL) et demande au Kernel de charger un controller et une fonction. 
	Pour que le Kernel s'y retrouve on va créer des routes. 
	
	Voir le fichier src/AppBundle/Controller/DefaultController.php
	
---------------------	
ETAPE 2 : Les Bundles
---------------------
Sommaire : 
1/ Le concept de bundle
2/ Création de notre Bundle-less
----------------------

1/ Le concept de bundle

 - Brique de l'application	
	
	- ProduitBundle :
			controller/
				boutiqueAction() : Affichage home
				categorieAction() : Affichage des pdts d'une cat
				produitAction() : Affichage d'un pdt

	- MembreBundle : 
			Controller/
				inscriptionAction()
				connexionAction()
				...
	- BaseBundle : 
			homeAction()
			contactAction()
			cgvAction()
			
	- /!\ Avec le temps on estime plus propre de faire
	AppBundle avec tous les controllers. 
	
	
	Un bundle se compose de : 
		- controller/  : Les controllers du Bundle
			- MembreController, ProduitController, BaseController...
		
		- DependencyInjection/ : Infos du Bundle
		- Entity/ : Contient les classes Modèles (POPO : Plain Old PHP Object)
		
		- Form/ : Contenir les formulaires de notre app
		
		- Ressources/ : Contient 
			Public/ : JS, CSS, 
			Config/ : Fichiers de config du Bundle (routing...)
			Views/ : Toutes les vues de l'app (.html.twig)
		
		- Repository/ : Contient les repository du Bundle
		
		
2/ Création de notre Bundle-less

	<cmd>
	php bin console generate:bundle

	 - On choisi un nom au Bundle (avec ou sans Namespace) : POLES\TestBundle (POLES:namespace)

	 - On choisi la destination [src/]
	 - On choisi le format des config [xml] : annotation
	 
	 /!\ Enregistrer le Bundle dans composer.json (PSR-4)
	 /!\ On met l'application à jour
		<cmd>
		composer update
	
	/!\ Attention : Dans cette version, par défaut la fonction render appelle les vues de la mauvaise manière
		-> POLESTestBundle:default:index.html.twig
		-> @POLESTest/default/index.html.twig
		
	====> A ce stade notre home doit afficher 'hello world'
	====> Notre app et notre nouveau Bundle sont opérationnels. 
	
---------------------------------------	
ETAPE 3 : Les routes et les controllers 
---------------------------------------	
Sommaire : 
1/ création de route
2/ L'objet Request
3/ L'objet Response
4/ redirection

-------------------------------------------------------------------------------

1/ Création de route :
	-> route('/') : route simple rend une vue 'hello world'
	-> route ('/bonjour') : route sans param et sans vue (juste un echo)
	-> route('/bonjjour2') : route sans param et avec Response
	-> route ('/hello/{prenom}') : route avec un param avec Rsponse
	-> route ('/hela/{prenom}') : route avec un param et rendu d'une vue html.twig
	-> route ('/hi/{prenom}') : route avec un param d'URL + param GET (age) et rendu d'une vue html.twig
	-> route ('/redirect') : route avec redirection
	-> route ('/message') : route avecutilisation de la session

- Les routes sont déclarées soit en annotation, soit en XML, soit en PHP, soit en YML(ici c'est en annotation).
- Chaque routr est liée à une fonction (action) qui contient Action dans son nom.
- Lors de la création d'une route on peut définir un paramètre dynamic/variable avec les {}. Celui-ci sera récupéré en argument de la redirection.

==> Une requète HTTP est toujours constituée d'une REQUETE et d'un Response

2/ L'objet Request :

L'objet Request stock les infos de la requete HTTP 

<code>
use Symfony\Component\HttpFoundation\Request;

$Request->query->get('param_en_get');
$Request->request->request('param_en_post');
$Request->request->cookies('param_en_cookie');
$Request->request->server('param_en_server');
$Request->request->attributes('param_en_URL');

Si request cherche un paramètre qui n'existe pas, il retourne une réponse vide et nom une erreur.

Pour récupérer, enregistrer des infos en SESSION : 

	Methode 1 :

		$session = $request->getSession();
		$session->get('id_membre');
		$session->set('id_membre', 12);

	Methode 2 :

		$request->session->get('id_membre');
		$request->session->set('id_membre',12);

3/ L'objet Response :

	- l'objet response va permettre à nos route de retourner une réponse. Chaque route doit au final retourner une réponse.

	<code>
	use Symfony\Component\HttpFoundation\Response;


	La fonction render() (qui affiche une vue) c'est déjà u,ne réponse.
	$this->render();
	$this->getTemplating()->renderResponse('vue.html.twig');


4/Redirection : 

	<code>
	use Symfony\Component\HttpFoundation\RedirectionResponse;

	(Voir la route/redirection)
	A ced stade, les routes doivent avoir un nom. Ce nom va servir pour les redirections, mais également pour les lien href


	5/message : 

	La variable "app" utilisé dans les template twig, est une variable global qui contient des info générale sur l'application (app.session, app.user)


-----------------------------------------------------
ETAPE 4 : Créer notre Boutique
-----------------------------------------------------

Sommaire : 
1/Créer un nouveau projet Symfony(Boutique3)
2/ Créer et enregistrer notre BoutiqueBundle
3/Updatede l'app
4/Réorganiser le bundle(controller et vues)
5/Créer les prmière routes
-------------------------------------------------



1/Créer un nouveau projet :

	- Se placer dans le dossier Symfony
	- Lancer la console
	<cdm>
	composer creat-project symfony/framework-standard-edition Boutique3


2/ Créer et enregistrer notre BoutiqueBundle : 
	 - Se placer dans le projet Boutique3 
	 <cdm>
	  cd Boutique3

	-Créer le BundleBoutiqueBundle
	<cdm>
	php bin/console generate:bundle 
	N 
	BoutiqueBundle 
	src/
	annotation


	- Enregistrer le Bundle 
	<cdm>composer.json 
	"psr-4": {
            "AppBundle\\": "src/AppBundle",
            "BoutiqueBundle\\": "src/BoutiqueBundle"
        },

	<cdm>
	composer update 

	- Lancement du server
	<cdm>
	php bin/console server:run

	-Modification de render dans la méthode indexAction de src/BoutiqueBundle/Controller/DefaultController 
	<code>
	render('BoutiqueBundle:Defalut:index.html.twig');
	render('@Boutique/Defalut/index.html.twig');


	3/Update de l'app 
		Après avoir enregistré notre BoutiqueBundle, on modifie le fichier composer.json et on met à jour l'application.
			-> routing.yml : le bundle est ajouté
			-> appKermel.php : le bundle est enregistré

	4/ Réorganiser le bundle (controller et vues)
		-> Renommer le fichier DEfaultController.php en ProduitController.php
		-> Créer CommandeController.php et MembreController.php
		-> Dans les vues on a ajouté : 
			Produit/, Commande/, Membre/

	5/ Créer les prmieres routes
		ProduitController :
			->"/"->indexAction()->index.html.twig
			->"produit/{id}"->produitAction()->produit.html.twig
			->"/categorie/{cat}"->categorieAction()->index.html.twig

	===> A ce stade, les vues non pas de design. Nous allons mettre cela en place dans le prochain chapitre "Twig"

	===> A ce stade nous pouvons pas encore communiquer avec la BDD, il faut voir DOCTRINE (sujet vaste) pour cela on créé donc dans nos controller des données fictives


----------------------------
ETAPE 5 : TWIG
----------------------------

Sommaire : 
1/ Qu'est ce que Twig
2/Créer un layout
3/ L'héritage Twig 
4/ Maodification de nos vues 
5/ Documentation 
-----------------------------------------------

1/ Qu'est ce que Twig
	- Twig est un moteur de template dont l'objectif est de simplifier la présence de PHP dans le HTML. Mais aussi de faciliter certaines actions (bouclees, mettre un texteen MAJ, formater les dates...)
	Autres moteur : TPL, Smarty, Liquid etc...

	Twig est issue de symfony mais on peut également l'installer sur tout projet.

2/Créer un layout
	- Un layout c'est la structure d'une page du site. Un site opeu avoir plusieurs structure (home, produit, admin, mentions légales...)

	- Un layout est prêt à recevoir des vues (des blocks) en déclarant des blocks

	-> récupérer le haut et le bas du site boutique en procédural.
	-> On nomme le fichier layout.html.twig
	-> On l'enregistre Boutique3/app/ressources/views/ 
	-> Dans le layout on créer un block content 
	-> Nos vue héritent du ou d'un layout. 

3/ L'héritage Twig 
	-> Au même titre que l'héritage en PHP, twig permet de dire à un fichier qu'il dépend d'un parent.
	-> Pour TWIG, en réalité, l'héritage se matérialise par le fait de créer des blocks dans le parents (fenêtre ouvertes) dans lesquels les vues peuvent afficher de contenu HTML ou non.

	/!\ Attention, si une vue hérite d'un template, il ne peut pas y avoir de contenu en dehors d'un block déclaré.



4/ Maodification de nos vues
	-> index.html.twig :
		- On récupère le code HTML correspondant à boutique.php
		- On définie l'héritage 
		- On met le contenude boutique.php  dans le block content 
		- On écrit les boucles en TWIG 
			<?php foreach($produits as produit) :?> 
			{% for produit in produits %}

		-On écrit les variables en TWIG
			<?= $produit['titre] ?>
			<?= $produit->getTitre()?>
			{{produit.titre}}


5/ Documentation 
	lien  : https://twig.symfony.com/doc/2.x/

EXERCICE : 
	-> afficher la page catégorie avec une catégorie à l'interieur
		'categorie/tshirt'

	-> afficher la page d'un produit 'produit


-------------------------------------------
ETAPE  6 : Assets
-------------------------------------------
Sommaire : 
1/ Modification du composer.json
2/ Mise à jour de l'application
3/ Modification de nos vues 
-------------------------------------
Le composant "Asset" de Symfony, nous permet de gérer les ressources (img,photos, CSS, js, liens...) et de les appeler de manière absolue

1/ Modification du composer.json
	<code>
	"require":{ 
		"symfony/asset": "^3.4"
},

2/ Mise à jour de l'application
	<cdm> 
	composer update 
	--> Le composer prend connaissance du composer.json et mets à jours les composants déjà installé et/ou ajoute les composants pas encore installés.


	Autre méthode :
	<cdm>
	composer require symfony/asset 
	--> Le composer installe le composant demandé et met à jour le fichier composer.json

3/ Modification de nos vues 
	- Layout :
		href="../../../web/css/styles.css"
		href=" {{asset('css/styles.css')}} "
		->La fonction asset() de twig permet d'avoir le chemin absolu vers le dossier web.

		href="index.php"
		href="{{path('home')}} "
		-> La fonction path() de twig permet d'afficher le chemin absolu d'une route. On utilise le nom de la route dans la fonction.



	- Vues :
		src="../../../web/photo/<?=$produit['photo]?>"
		src="{{asset('/photo/' ~ produit.photo)}} "
		->La fonction asset() de twig permet de définir un chemin dynamique !

		href="fiche_produit.php?=id=?=produit[id_produit]?>"
		href="{{path('produit',{'id':produit.id_produit} )}}"
		-> la fonction path() permet de définir des url dynamique ou : 
			- 'produit' = le nom de la route
			- 'id' = le nom du param dynamique attendu dans la route 
			- produit.id_produit = la valeur de paramètre


-----------------------------
ETAPE  7 : Nos Entités
-----------------------------
Sommaire :
1/ Doctrine ORM et le concept d'Entity
2/Créer entité produit 
3/ Annotation 
4/ Créer la BDD depuis les entités 
5/Générer les entités depuis la BDD 
---------------------------------------------

1/ Doctrine ORM et le concept d'Entity
	- D'une certaine manière les entité correspondents à la partie MODEL de notre MVC, c'est la relation avec la BDD.
	- Normalement on ne devrait plus faire de SQL ni d'ouvrir phpMyadmin
	- On créé de "Entity" (classes, plan de fabrication de nos objets, POPO) qui vont permettre à DOCTRINE de manipuler les tables dans la BDD.
	- Par exemple, nous ne ferons plus de requête INSERT mais on utilisera une fonction de doctrine (persist()) qui sera en mesure à travers nos "Entity" de manipuler la BDD 

	---> Pour que tout cela soit possible, il faut définir les intéractions existante entre nos Entity et la BDD via la DOCTRINE ORM (Object, Relation Mapping). On parle de "mapping".

2/Créer entité produit 
	A/ On créé un dossier Entity/ dans notre BoutiqueBundle
	B/ On créé un fichier Produit.php 
	C/ On va créer les propriété, les getter/setter et les mapping

3/ Annotation 
	<code>
	use Doctrine\ORM\Mapping as ORM;

	/**
	*@ORM\tables
	*@ORM\Entity
	*/
	On précise que cette entité est mappé et la table à laquelle elle correspond.

	Pour chaque propriété on définie les infos : 
		- Clé primaire : 
			/**
			*@ORM\Column
			*@ORM\id
			*@ORM\GeneratedValue
			*/

		-Autre propriétés :
			 /**
			*@ORM\Column
			*/

	Liens : 
	Basic Mapping : https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/basic-mapping.html
	Associate Mapping : https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/association-mapping.html




4/ Mettre à jour la BDD via les Entity

	<cdm>
	php bin/console doctrine:schema:update --dump-sql 
	--> Montrer la requête à exécuter

	<cdm> 
	php bin/console doctrine:schema:update --force 
	--> execute la requête (modif de la BDD)


5/Générer les entités depuis la BDD 
	<cdm>
	php bin/console doctrine:generate:entity
	Puis opn suit les differentes indication/étapes

6/ Générer les entities depuis la BDD
	A/ Supprimons le dossier Entity/ pour tout recréer (renommer Entity_)
	B/ <cdm>
		php bin/console doctrine:mapping:import BoutiqueBundle\Entity annotation --path=src/BoutiqueBundle/Entity
		--> cela créé les entité dans sans getter et setter

		C/<cdm>
		php bin/console doctrine:generate:Entities BoutiqueBundle
		--> Cela met à jour les entités avec les getter et setter 

		D/Je vais lier mes entités à un repository
		@ORM\Entity(repositoryClass="BoutiqueBundle\Repository\ProduitRepository")
		@ORM\Entity(repositoryClass="BoutiqueBundle\Repository\MembreRepository")
		@ORM\Entity(repositoryClass="BoutiqueBundle\Repository\CommandeRepository")
		@ORM\Entity(repositoryClass="BoutiqueBundle\Repository\DetailsCommandeRepository")
		-> Cela va créer les répositories correspondant à nos entités


7/ Créer la BDD depuis les entités

	1 -> Pour tester ce dernier point.. à savoir la création de la BDD depuis les Entités existante... On va modifier les paramètre de connexion à la BDD. On se connecte à une BDD site_commerce2 (qui n'existe pas)
	<cdm>
	app/config/parameters.yml
	 
	 2 -> <cdm>
	 php bin/console doctrine:database:create 

	 3 -> <cdm>
	 php bin/console doctrine:schema:update --dump-sql 
	 --> montre la requête à exécuter 

	 4 -> <cdm>
	 php bin/console doctrine:schema:update --force 
	 --> execute la requête (modif de la BDD) 

------------------------------
ETAPE  8 : Doctrine
------------------------------
Sommaire : 
1/ Le service Doctrine
2/ Accéder au service Doctrine depuis les controllers 
3/ Requete "SELECT * FROM ....."
4/ Requete "SELECT * FROM .... WHERE id=x"
5/ Requete "SELECT * FROM .... WHERE x=y"
6/ Requete "INSERT/UPDATE"
7/ Requete "DELETE"
8/ Create Query et le Query Builder 
---------------------------------------- 

1/ Le service Doctrine - DQL : 
	-> Doctrine est un outil puissant qui est utilisé dans symfony mais également dans ZEND, LARAVEL, CAKE... 
	-> Doctrine se compose de deux éléments :
		- ORM (Object Relation Mapping) : mapping des entités
		- DBAL (DataBase Abstract Layer) : l'idée est de simplifier des requetes SQL en utilisant des fonctions PHP. On parle de DQL (Doctrine Query Language)

2/ Accéder au service Doctrine depuis les controllers :

	Soit via l'EntityRepository :
	<code> dans un controller:
	$repository = $this->getDoctrine()->getRepository(Produit::class);

	Soit via l'EntityManager :
	<code> dans un controller:
	$em = $this->getDoctrine()->getManager();

	<code> Dans un des repository :
	$em = $this->getEntityManager();

3/ Requete "SELECT * FROM ....." :

	<code>
	$produit = $repository->findAll();

4/ Requete "SELECT * FROM .... WHERE id=x" :

	<code>
	$produit = $repository->find($id);
	$produit = $em->find(Produit::class,$id);

5/ Requete "SELECT * FROM .... WHERE x=y" :

	<code>
	$produit = $repository->findBy(['categorie'=>$cat]);
	$produit = $repository->findBy(array(['categorie'=>$cat]));

	$etudiant = $repository->findOneBy(['prenom'=>'sabuj']);

	$produits = $repository->findBy(['categorie'=>'tshirt', 'couleur',=>'rouge'], ['prix'=>'DESC'] 10,0);

6/ Requete "INSERT/UPDATE" :

	** Pour INSERER un enregistrement on instancie un objet de la classe de l'objet (Entity) correspondante, on affecte des valeurs aus propriétés (via le formulaire normalement).
	$produit = new Produit;
	$produit->persist($produit);

	-Enfin on l'enregistre :
	$em->flush();

	** Pour UPDATE un enregistrement... D'abord on le récupère sous forme d'objet (find), on le modifie (via un formulaire), puis on le persist() et on flush().
	--> cf la route /admin/produit/update/(id)

7/ Requete "DELETE" :

	**- Pour DELETE un enregistrement on le récupère sous forme d'un objet avec (v). On prépare la suppression de cet objet (remove) et enfin on flush().
	--> cf la route /admin/produit/delete/(id)

8/ Create Query et le Query Builder 

	- Doctrine nous permet de manipuler simplement les enregistrements dans la BDD à travers l'utilisation des objets (Entity) et de fonctions simple (findAll, find, findBy, findOneBy, persist, remove, flush).

	- Cela-dit on pourrait être ammené à vouloir des requêtes plus complexes et plus spécifique. Doctrine nous fournit deux outils pour le faire :
		**createQuery :
		Nous permet d'écrire du SQL (DQL)
			---> cf route 'home' / ou ProduitRepository 

		**queryBuilder :
		Nous permet d'écrire du SQL en PHP
			---> cf route 'home' / ou ProduitRepository 


Lines : 
	Doc Doctrine :
	  https://www.doctrine-project.org/

	CreatQuery :    https://hotexamples.com/examples/doctrine.orm/EntityManager/createQuery/php-entitymanager-createquery-method-examples.html

	QueryBuilder :
	https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/query-builder.html

	QueryBuilder :
	 https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/query-builder.html
	 
    https://www.doctrine-project.org/projects/doctrine-mongodb-odm/en/latest/reference/query-builder-api.html#creating-a-query-builder


----------------------------------
ETAPE  9 : Les formulaires
----------------------------------

Sommaire : 
1/ Le fonctionnement des formulaire
2/ Création d'une formulaire simple pour l'inscription 
3/ Les classes types 
4/ Récupérer les données du formulaire 
5/ Personnaliser le formulaire avec bootstrap 
6/ Créer nos propres class type hérité de AbstractType 
7/ Update un enregistrement très simplement 
8/ Champs File (pour la photo d'un produit par exemple) 
-------------------------------

1/ Le fonctionnement des formulaire

Avec Symfony, nos formulaires sont liés  à une entité 
	-> inscription -> Entity/Membre
	-> ajout de produit -> Entity/Produit
	-> lmodification de produit -> Entity/Produit

	Par exemple lorsque l'on modifie un produit en BDD via un formulaire... En réalité le formulaire modifie un objet produit, on dit que l'on hydrate le formulaire. 

	Chaque type de champs (text, checkbox, select, submit...) correspond à une classe (textType, checkboxType, ChoiceType, SubmitType...). 


2/ Création d'une formulaire simple pour l'inscription 
	-> Créer une route "/inscription" dans le MembreController

	FormBuilder est un constructeur de formulaire. Il nous permet de paramètrer un formulaire.

	Methode long :
	$formBuilder = $this get('form.factory)->createBuilder(FormType::class, $membre);
	Méthode courte :
	$formBuilder = $this->createBuilder($membre);

	En créant un formulaire on le lie à un objet issu d'une entité ($membre).

	On paramètre le formulaire(créer chaque champs) grâce à la méthode add de notre formBuilder.
	$formBuilder->add('prenom', textType::class) etc... 

	/!\ Attention à bien use toutes les classes Type dont nous avons besoin


	On oublie pas de générer le formulaire : 
	$form = $formBuilder->gerForm();

	Enfin on récupère la view :
	'membreForm' = $Form->createView();

	Dans le Twig le formulaire est afficher de plusieur manière possible (voir inscription.html.twig)
	{{form'membreForm}}

3/ Les classes types 

lien : 
	https://symfony.com/doc/current/reference/forms/types.html


4/ Récupérer les données du formulaire 

	a/ On récupère la requete POST du formulaire et on lie les champs à notre objet(hydrate l'objet)
		$form-> handleRequest($request);

		B/ On check que le formulaire soit bien activé (nom vide) et les données valides 
			if($form->isSubmitted() && $form->valid()){}

			/!\ nous verrons plus bas les options de validités

		C/ On enregistreles données saisies 
		<code>
			$em = $this->getDoctrine()->getManager();
			$em->persist($membre);
			$em->flush();

- Méthode 1 :
    fichier app/config/config.html
    <code>
    twig
        form-themes:
            - 'bootstrap_4_layout.html.twig'



-Méthode 2 :
	On prend la main sur la création du formulaie avec notre propre structure et mise en forme voire le fichier inscription.html.twig
	<code>
	form_star() etc...
	
6/ Créer nos propres class type hérité de AbstractType 
	->Contexte : Actuellement pour ajouter un formulaire a une route, on récupère le formBuilder et on configure tous les champs...
		-> probleme : les routes inscription, update_profil, admin_add_membre et admin_update_membre auront toutes besoin d'un même formulaire...

		-> solution : On va créer une classe MembreType dont le boulot sera de paramètrer(créer) un formulaire Membre.

		-> Résultat : Il suffira de faire appel à cette classe pour générer un formulaireMembre.

		==> GAIN DE TEMPS et meilleur FACTORISATION du code

		Comme souvent Symfony nous permet d'optimiser certaine chose via les ligne de commande.
		<code>
		php bin/console generate:doctrine:form BoutiqueBundle:Membre
		php bin/console generate:doctrine:form BoutiqueBundle:Produit
		php bin/console generate:doctrine:form BoutiqueBundle:Commande

7/ Update un enregistrement très simplement 
	- voir la route update_produit
		-> le fonctionnement de Symfony permet de liéer le formulaire à un objet; On dit Hydrater. et de fait lorsque l'on valide un formulaire (persist() puis flush()) cela enregistre les infos en BDD. 

8/ Champs File (pour la photo d'un produit par exemple) 
	-> Dans le formulaire(ProduitType) on créé un champs file (fileType). On le nomme file et surtout pas photo. car ce n'est la propriété photo de notre objet produit. La propriété photo elle, elle stocke le nom de la photo pour l'enregistrement en BDD. 

	-> On modifie notre entité Produit 
		- Ajout d'une propriété file (liée au champs file du formulaire) qui manipulera la data. 
		- Cette propriété est en fait un objet UploadedFile, prêt à être charger sur le serveur. 

	-> On créé les fonctions suivantes : 
		-UploadedPhoto() 
		-photoDir() 
		-renamePhoto() 
		-removePhoto() 
			=> Ces fonctions on chacune leur rôle et manipule le nom, le chemin, l'enregistrement et la suppression de la photo 

	-> On ajouote à nos fonction du controller (update_produit et add_produit) la fonction uploadedPhoto() et removePhoto() avant flush() les infos du formulaire. 

	/!\ En utilisant Symfony de manière plus avancée, on pourrait utiliser les évènements pour rendre certaines choses plus automatiques comme par exemple supprimer tout seul une photo lorsque'une nouvelle est chargée.